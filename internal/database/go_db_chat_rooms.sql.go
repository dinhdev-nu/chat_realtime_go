// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: go_db_chat_rooms.sql

package database

import (
	"context"
	"database/sql"
)

const createRoom = `-- name: CreateRoom :execresult
INSERT INTO ` + "`" + `go_db_chat_rooms` + "`" + ` (` + "`" + `room_name` + "`" + `, ` + "`" + `room_is_group` + "`" + `, ` + "`" + `room_created_by` + "`" + `) VALUES (?, ?, ?)
`

type CreateRoomParams struct {
	RoomName      sql.NullString
	RoomIsGroup   bool
	RoomCreatedBy sql.NullInt64
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRoom, arg.RoomName, arg.RoomIsGroup, arg.RoomCreatedBy)
}

const getRoomById = `-- name: GetRoomById :one
SELECT room_id, room_name, room_is_group, room_created_by, room_created_at FROM ` + "`" + `go_db_chat_rooms` + "`" + ` 
WHERE ` + "`" + `room_id` + "`" + ` = ? LIMIT 1
`

func (q *Queries) GetRoomById(ctx context.Context, roomID uint64) (GoDbChatRoom, error) {
	row := q.db.QueryRowContext(ctx, getRoomById, roomID)
	var i GoDbChatRoom
	err := row.Scan(
		&i.RoomID,
		&i.RoomName,
		&i.RoomIsGroup,
		&i.RoomCreatedBy,
		&i.RoomCreatedAt,
	)
	return i, err
}

const getRoomByName = `-- name: GetRoomByName :one
SELECT ` + "`" + `room_id` + "`" + `, ` + "`" + `room_is_group` + "`" + ` 
FROM ` + "`" + `go_db_chat_rooms` + "`" + ` 
WHERE ` + "`" + `room_name` + "`" + ` IN (?, ?) 
LIMIT 1
`

type GetRoomByNameParams struct {
	RoomName   sql.NullString
	RoomName_2 sql.NullString
}

type GetRoomByNameRow struct {
	RoomID      uint64
	RoomIsGroup bool
}

func (q *Queries) GetRoomByName(ctx context.Context, arg GetRoomByNameParams) (GetRoomByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getRoomByName, arg.RoomName, arg.RoomName_2)
	var i GetRoomByNameRow
	err := row.Scan(&i.RoomID, &i.RoomIsGroup)
	return i, err
}
