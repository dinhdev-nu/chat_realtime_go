// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: go_db_chat_messages_direct.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const getMessagesDirectByRoomId = `-- name: GetMessagesDirectByRoomId :many
SELECT message_id, 
       message_room_id, 
       message_receiver_id, 
       message_content, 
       message_type,
       message_sent_at
FROM go_db_chat_messages_direct
WHERE message_room_id = ?
ORDER BY message_sent_at DESC
LIMIT ? OFFSET ?
`

type GetMessagesDirectByRoomIdParams struct {
	MessageRoomID uint64
	Limit         int32
	Offset        int32
}

func (q *Queries) GetMessagesDirectByRoomId(ctx context.Context, arg GetMessagesDirectByRoomIdParams) ([]GoDbChatMessagesDirect, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesDirectByRoomId, arg.MessageRoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GoDbChatMessagesDirect
	for rows.Next() {
		var i GoDbChatMessagesDirect
		if err := rows.Scan(
			&i.MessageID,
			&i.MessageRoomID,
			&i.MessageReceiverID,
			&i.MessageContent,
			&i.MessageType,
			&i.MessageSentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMessageDirect = `-- name: SaveMessageDirect :execresult
INSERT INTO go_db_chat_messages_direct (
    message_room_id, 
    message_receiver_id, 
    message_content, 
    message_type, 
    message_sent_at
) VALUES (?, ?, ?, ?, ?)
`

type SaveMessageDirectParams struct {
	MessageRoomID     uint64
	MessageReceiverID uint64
	MessageContent    string
	MessageType       NullGoDbChatMessagesDirectMessageType
	MessageSentAt     time.Time
}

func (q *Queries) SaveMessageDirect(ctx context.Context, arg SaveMessageDirectParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, saveMessageDirect,
		arg.MessageRoomID,
		arg.MessageReceiverID,
		arg.MessageContent,
		arg.MessageType,
		arg.MessageSentAt,
	)
}
