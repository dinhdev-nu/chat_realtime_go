// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: go_db_chat_room_members.sql

package database

import (
	"context"
	"database/sql"
)

const getAnotherPrivateMenberByRoomId = `-- name: GetAnotherPrivateMenberByRoomId :one
SELECT member_user_id, member_last_seen FROM go_db_chat_room_members 
WHERE room_id = ? AND member_user_id != ?
`

type GetAnotherPrivateMenberByRoomIdParams struct {
	RoomID       uint64
	MemberUserID uint64
}

type GetAnotherPrivateMenberByRoomIdRow struct {
	MemberUserID   uint64
	MemberLastSeen sql.NullInt64
}

func (q *Queries) GetAnotherPrivateMenberByRoomId(ctx context.Context, arg GetAnotherPrivateMenberByRoomIdParams) (GetAnotherPrivateMenberByRoomIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAnotherPrivateMenberByRoomId, arg.RoomID, arg.MemberUserID)
	var i GetAnotherPrivateMenberByRoomIdRow
	err := row.Scan(&i.MemberUserID, &i.MemberLastSeen)
	return i, err
}

const insetMemberToRoom = `-- name: InsetMemberToRoom :exec
INSERT INTO go_db_chat_room_members (
  room_id, member_user_id,
  member_role
) 
VALUES (?, ?, ?)
`

type InsetMemberToRoomParams struct {
	RoomID       uint64
	MemberUserID uint64
	MemberRole   string
}

func (q *Queries) InsetMemberToRoom(ctx context.Context, arg InsetMemberToRoomParams) error {
	_, err := q.db.ExecContext(ctx, insetMemberToRoom, arg.RoomID, arg.MemberUserID, arg.MemberRole)
	return err
}

const updateMemberLastSeen = `-- name: UpdateMemberLastSeen :exec
UPDATE go_db_chat_room_members
SET member_last_seen = ?
WHERE room_id = ? AND member_user_id = ?
`

type UpdateMemberLastSeenParams struct {
	MemberLastSeen sql.NullInt64
	RoomID         uint64
	MemberUserID   uint64
}

func (q *Queries) UpdateMemberLastSeen(ctx context.Context, arg UpdateMemberLastSeenParams) error {
	_, err := q.db.ExecContext(ctx, updateMemberLastSeen, arg.MemberLastSeen, arg.RoomID, arg.MemberUserID)
	return err
}
