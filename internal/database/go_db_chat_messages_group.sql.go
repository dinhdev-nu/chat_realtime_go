// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: go_db_chat_messages_group.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const getMessagesGroupByRoomId = `-- name: GetMessagesGroupByRoomId :many
SELECT message_id,
       message_room_id,
       message_sender_id,
       message_type,
       message_content,
       message_sent_at
FROM go_db_chat_messages_group
WHERE message_room_id = ?
ORDER BY message_sent_at DESC
LIMIT ? OFFSET ?
`

type GetMessagesGroupByRoomIdParams struct {
	MessageRoomID uint64
	Limit         int32
	Offset        int32
}

type GetMessagesGroupByRoomIdRow struct {
	MessageID       uint64
	MessageRoomID   uint64
	MessageSenderID uint64
	MessageType     NullGoDbChatMessagesGroupMessageType
	MessageContent  string
	MessageSentAt   time.Time
}

func (q *Queries) GetMessagesGroupByRoomId(ctx context.Context, arg GetMessagesGroupByRoomIdParams) ([]GetMessagesGroupByRoomIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesGroupByRoomId, arg.MessageRoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesGroupByRoomIdRow
	for rows.Next() {
		var i GetMessagesGroupByRoomIdRow
		if err := rows.Scan(
			&i.MessageID,
			&i.MessageRoomID,
			&i.MessageSenderID,
			&i.MessageType,
			&i.MessageContent,
			&i.MessageSentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMessageGroup = `-- name: SaveMessageGroup :execresult
INSERT INTO go_db_chat_messages_group (
    message_room_id, 
    message_sender_id, 
    message_content, 
    message_type, 
    message_sent_at
) VALUES (?, ?, ?, ?, ?)
`

type SaveMessageGroupParams struct {
	MessageRoomID   uint64
	MessageSenderID uint64
	MessageContent  string
	MessageType     NullGoDbChatMessagesGroupMessageType
	MessageSentAt   time.Time
}

func (q *Queries) SaveMessageGroup(ctx context.Context, arg SaveMessageGroupParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, saveMessageGroup,
		arg.MessageRoomID,
		arg.MessageSenderID,
		arg.MessageContent,
		arg.MessageType,
		arg.MessageSentAt,
	)
}
